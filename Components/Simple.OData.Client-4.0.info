{"Name":"Simple OData Client","Id":1371,"Alias":"Simple.OData.Client","Description":"## Simple.OData.Client\n\nSimple.OData.Client is a multiplatform OData client library supporting .NET 4.x, Silverlight, Windows Phone, iOS and Android platforms. The library supports both typed and dynamic syntax (as long as dynamic is supported on the selected platform), doesn\u0027t require generation of context or entity classes and fits RESTful nature of OData services.\n\nSimple.OData.Client uses non-blocking asynchronous model and internally depends on Microsoft HttpClient library. \n\n## Xamarin Store component and NuGet package\n\nSimple.OData.Client is packaged as both Xamarin Store component and a NuGet package (available from NuGet.org). Both library sources correspond to the same library. If the application is developed for several platforms, it can be more convenient to use Simple.OData.Client NuGet package that is optimized for binary reuse and targets multiple platforms with the same assembly. If the application targets a single platorm, choice of either Xamarin Store component or NuGet package is just a matter of a developer\u0027s preference. In any case it\u0027s a NuGet package that is installed, Xamarin Store component is just a wrapper around the NuGet package.\n\nSimple.OData.Client NuGet package supports all OData protocols (versions 1-4), but the unified support comes at the cost of the package footprint. If you know the version of the OData service you are going to use, you can install from nuget.org the version that targets the specific OData protocol (Simple.OData.V3.Client or Simple.OData.V4.Client). In that case you shouldn\u0027t be using a Xamarin Store component but install the chosen package directly from nuget.org.\n\n## Quick Usage\n\nSimple.OData.Client comes with typed and dynamic API. Typed API is supported on all platforms, support for dynamic API is experimental on iOS and available on other platforms.\n\r\nExample of a typed API syntax:\r\n\r\n\u003cpre\u003e\nvar client = new ODataClient(\"https://nuget.org/api/v1\");\n\nvar packages = client\n    .For\u0026lt;Packages\u0026gt;()\n    .Filter(x =\u003e x.Title == \"Simple.OData.Client\")\n    .FindEntries();\n\nforeach (var package in packages)\n{\n    Console.WriteLine(package.Title);\n}\u003c/pre\u003e\r\n\r\nExample of a dynamic API syntax:\r\n\r\n\u003cpre\u003e\nvar client = new ODataClient(\"https://nuget.org/api/v1\");\nvar x = ODataDynamic.Expression;\n\nvar packages = client\n    .For(x.Packages)\n    .Filter(x.Title == \"Simple.OData.Client\")\n    .FindEntries();\n\nforeach (var package in packages)\n{\n    Console.WriteLine(package.Title);\n}\u003c/pre\u003e\r\n\nSee \"Getting Started\" document for an example of using Simple.OData.Client to build an application NuGetFinder that searches NuGet OData feed.\n\n## Other Resources\n\n* [Wiki pages](https://github.com/object/Simple.OData.Client/wiki)\n* [Source Code Repository](https://github.com/object/Simple.OData.Client)\n\n\n","Version":"4.0","Summary":"Cross-platform library to communicate with OData services.","QuickStart":"## Getting started with Simple.OData.Client\r\n\r\nSimple.OData.Client component comes with a sample that demonstrates the library possibilities on a small mobile app NuGetFinder that can be used to search NuGet packages, browse results and view package details. The sample app is available for all major mobile platforms (iOS, Android, Windows Phone).\r\n\r\nTo use Simple.OData.Client in our C# code we need to ensure the project references Microsoft HttpClient assembly (see \"Details\" document for more). Then we can import Simple.OData.Client namespace:\r\n\r\n\u003cpre\u003eusing Simple.OData.Client;\u003c/pre\u003e\r\n\nIn case you are building an iOS application you will have to ensure it holds a reference to a respective OData adapter (V3 or V4), otherwise iOS linker may not include it in the binaries:\n\n\u003cpre\u003e// Specify V3 or V4 adapter (or both) depending on the protocol version of the OData service\nSimple.OData.Client.V3Adapter.Reference(); \u003c/pre\u003e\n\r\nNext we create an instance of ODataClient by passing an OData service URL. In a NuGetFinder sample it\u0027s a URL of the NuGet OData feed:\r\n\r\n\u003cpre\u003evar client = new ODataClient(\"https://nuget.org/api/v1\");\u003c/pre\u003e\r\n\r\nAfter the client is instantiated, we can begin consuming OData service information.\r\nNuGetFinder sample code builds an OData request incrementally by applying user-selected options. It begins with specifying OData collection and result count:\r\n\r\n\u003cpre\u003evar command = odataClient\n    .For\u0026lt;Package\u0026gt;(\"Packages\")\n    .Top(count);\n\u003c/pre\u003e\r\n\r\nNext, the sort order clause is added. The sort depends on the user selection:\r\n\r\n\u003cpre\u003eswitch (_sortPicker.SelectedIndex)\n{\n    case 0:\n        command.OrderByDescending(x =\u003e x.DownloadCount);\n        break;\n    case 1:\n        command.OrderBy(x =\u003e x.Id);\n        break;\n    case 2:\n        command.OrderByDescending(x =\u003e x.LastUpdated);\n        break;\n}\n\u003c/pre\u003e\r\n\r\nThe code above sets the sort order to be either descending by download count, ascending by package Id or descending by recent update time. In addition a user can specify a search text pattern:\r\n\r\n\u003cpre\u003eif (!string.IsNullOrEmpty(_searchText.Text))\n{\n    command.Filter(x =\u003e x.Title.Contains(_searchText.Text) \u0026\u0026 x.IsLatestVersion);\n}\nelse\n{\n    command.Filter(x =\u003e x.IsLatestVersion);\n}\n\u003c/pre\u003e\r\n\r\nWe complete the command generation by restricting the result with the set of fields that our app will need. This will reduce the network traffic.\r\n\r\n\u003cpre\u003ecommand.Select(x =\u003e new\n{\n    x.Id, \n    x.Title, \n    x.Version, \n    x.LastUpdated, \n    x.DownloadCount, \n    x.VersionDownloadCount, \n    x.PackageSize, \n    x.Authors, \n    x.Dependencies\n});\n\u003c/pre\u003e\r\n\r\nNow that the command is ready, we can make a call to fetch the data from the OData service:\r\n\r\n\u003cpre\u003evar results = await command.FindEntriesAsync();\n\u003c/pre\u003e\r\n\r\nUpon the completion of FindEntriesAsync the results are populated with NuGet package information, filtered according to search and field selection criteria and sorted in a given order.\r\n\r\nPlease refer to the library Wiki pages for more examples and complete documentation. And since Simple.OData.Client is an open-source project, you can always check its source code as well as its hundreds tests.\r\n\r\n\r\n## Other Resources\r\n\r\n* [Wiki pages](https://github.com/object/Simple.OData.Client/wiki)\r\n* [Source Code Repository](https://github.com/object/Simple.OData.Client)\r\n","Hash":"03d76e276e994cf18728259c8f07a270","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}