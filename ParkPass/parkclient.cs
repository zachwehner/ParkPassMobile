//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace ParkPassPreferred.DBModels
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Park", Namespace="http://schemas.datacontract.org/2004/07/ParkPassPreferred.DBModels")]
    public partial class Park : object
    {
        
        private string AddressField;
        
        private string CityField;
        
        private int IDField;
        
        private string NameField;
        
        private string ParkDescriptionField;
        
        private string StateField;
        
        private int ZipcodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City
        {
            get
            {
                return this.CityField;
            }
            set
            {
                this.CityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                this.IDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParkDescription
        {
            get
            {
                return this.ParkDescriptionField;
            }
            set
            {
                this.ParkDescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State
        {
            get
            {
                return this.StateField;
            }
            set
            {
                this.StateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Zipcode
        {
            get
            {
                return this.ZipcodeField;
            }
            set
            {
                this.ZipcodeField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IParkWebService")]
public interface IParkWebService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IParkWebService/find", ReplyAction="http://tempuri.org/IParkWebService/findResponse")]
    System.IAsyncResult Beginfind(int id, System.AsyncCallback callback, object asyncState);
    
    ParkPassPreferred.DBModels.Park Endfind(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IParkWebService/findAll", ReplyAction="http://tempuri.org/IParkWebService/findAllResponse")]
    System.IAsyncResult BeginfindAll(System.AsyncCallback callback, object asyncState);
    
    ParkPassPreferred.DBModels.Park[] EndfindAll(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IParkWebServiceChannel : IParkWebService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class findCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public findCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public ParkPassPreferred.DBModels.Park Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((ParkPassPreferred.DBModels.Park)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class findAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public findAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public ParkPassPreferred.DBModels.Park[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((ParkPassPreferred.DBModels.Park[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ParkWebServiceClient : System.ServiceModel.ClientBase<IParkWebService>, IParkWebService
{
    
    private BeginOperationDelegate onBeginfindDelegate;
    
    private EndOperationDelegate onEndfindDelegate;
    
    private System.Threading.SendOrPostCallback onfindCompletedDelegate;
    
    private BeginOperationDelegate onBeginfindAllDelegate;
    
    private EndOperationDelegate onEndfindAllDelegate;
    
    private System.Threading.SendOrPostCallback onfindAllCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public ParkWebServiceClient()
    {
    }
    
    public ParkWebServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ParkWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ParkWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ParkWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<findCompletedEventArgs> findCompleted;
    
    public event System.EventHandler<findAllCompletedEventArgs> findAllCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IParkWebService.Beginfind(int id, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.Beginfind(id, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    ParkPassPreferred.DBModels.Park IParkWebService.Endfind(System.IAsyncResult result)
    {
        return base.Channel.Endfind(result);
    }
    
    private System.IAsyncResult OnBeginfind(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        int id = ((int)(inValues[0]));
        return ((IParkWebService)(this)).Beginfind(id, callback, asyncState);
    }
    
    private object[] OnEndfind(System.IAsyncResult result)
    {
        ParkPassPreferred.DBModels.Park retVal = ((IParkWebService)(this)).Endfind(result);
        return new object[] {
                retVal};
    }
    
    private void OnfindCompleted(object state)
    {
        if ((this.findCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.findCompleted(this, new findCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void findAsync(int id)
    {
        this.findAsync(id, null);
    }
    
    public void findAsync(int id, object userState)
    {
        if ((this.onBeginfindDelegate == null))
        {
            this.onBeginfindDelegate = new BeginOperationDelegate(this.OnBeginfind);
        }
        if ((this.onEndfindDelegate == null))
        {
            this.onEndfindDelegate = new EndOperationDelegate(this.OnEndfind);
        }
        if ((this.onfindCompletedDelegate == null))
        {
            this.onfindCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnfindCompleted);
        }
        base.InvokeAsync(this.onBeginfindDelegate, new object[] {
                    id}, this.onEndfindDelegate, this.onfindCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IParkWebService.BeginfindAll(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginfindAll(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    ParkPassPreferred.DBModels.Park[] IParkWebService.EndfindAll(System.IAsyncResult result)
    {
        return base.Channel.EndfindAll(result);
    }
    
    private System.IAsyncResult OnBeginfindAll(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((IParkWebService)(this)).BeginfindAll(callback, asyncState);
    }
    
    private object[] OnEndfindAll(System.IAsyncResult result)
    {
        ParkPassPreferred.DBModels.Park[] retVal = ((IParkWebService)(this)).EndfindAll(result);
        return new object[] {
                retVal};
    }
    
    private void OnfindAllCompleted(object state)
    {
        if ((this.findAllCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.findAllCompleted(this, new findAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void findAllAsync()
    {
        this.findAllAsync(null);
    }
    
    public void findAllAsync(object userState)
    {
        if ((this.onBeginfindAllDelegate == null))
        {
            this.onBeginfindAllDelegate = new BeginOperationDelegate(this.OnBeginfindAll);
        }
        if ((this.onEndfindAllDelegate == null))
        {
            this.onEndfindAllDelegate = new EndOperationDelegate(this.OnEndfindAll);
        }
        if ((this.onfindAllCompletedDelegate == null))
        {
            this.onfindAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnfindAllCompleted);
        }
        base.InvokeAsync(this.onBeginfindAllDelegate, null, this.onEndfindAllDelegate, this.onfindAllCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override IParkWebService CreateChannel()
    {
        return new ParkWebServiceClientChannel(this);
    }
    
    private class ParkWebServiceClientChannel : ChannelBase<IParkWebService>, IParkWebService
    {
        
        public ParkWebServiceClientChannel(System.ServiceModel.ClientBase<IParkWebService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult Beginfind(int id, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = id;
            System.IAsyncResult _result = base.BeginInvoke("find", _args, callback, asyncState);
            return _result;
        }
        
        public ParkPassPreferred.DBModels.Park Endfind(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            ParkPassPreferred.DBModels.Park _result = ((ParkPassPreferred.DBModels.Park)(base.EndInvoke("find", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginfindAll(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("findAll", _args, callback, asyncState);
            return _result;
        }
        
        public ParkPassPreferred.DBModels.Park[] EndfindAll(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            ParkPassPreferred.DBModels.Park[] _result = ((ParkPassPreferred.DBModels.Park[])(base.EndInvoke("findAll", _args, result)));
            return _result;
        }
    }
}
